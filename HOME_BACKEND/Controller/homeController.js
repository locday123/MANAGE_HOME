import Home from "../Model/HomeModel.js"
import Floor from "../Model/FloorModel.js"
import {Op} from "sequelize"

// L·∫•y t·∫•t c·∫£ nh√†
const getAllHomes = async (req, res) => {
    try {
        const homes = await Home.findAll()
        res.json(homes) // Tr·∫£ v·ªÅ t·∫•t c·∫£ nh√†
    } catch (error) {
        console.error("‚ùå L·ªói khi l·∫•y t·∫•t c·∫£ nh√†:", error)
        res.status(500).json({message: "C√≥ l·ªói x·∫£y ra"})
    }
}

// T·∫°o nh√† m·ªõi
const createHome = async (req, res) => {
    try {
        const home = await Home.create(req.body)
        res.status(201).json(home)
    } catch (error) {
        console.error("‚ùå L·ªói t·∫°o nh√†:", error)
        res.status(500).json({message: "L·ªói t·∫°o nh√†", error})
    }
}

// X√≥a nh√†
const deleteHome = async (req, res) => {
    const {id} = req.params

    try {
        const deleted = await Home.destroy({
            where: {home_ID: id},
        })

        if (deleted) {
            res.json({message: "‚úÖ Nh√† ƒë√£ ƒë∆∞·ª£c x√≥a"})
        } else {
            res.status(404).json({message: "‚ùå Kh√¥ng t√¨m th·∫•y nh√†"})
        }
    } catch (error) {
        console.error("‚ùå L·ªói khi x√≥a nh√†:", error)
        res.status(500).json({message: "L·ªói m√°y ch·ªß", error})
    }
}

// C·∫≠p nh·∫≠t nh√†

const updateHome = async (req, res) => {
    const {id} = req.params
    const data = req.body
    const newTotalFloors = Number(data.home_TotalFloors)

    try {
        const home = await Home.findByPk(id)
        if (!home) {
            return res.status(404).json({message: "‚ùå Kh√¥ng t√¨m th·∫•y nh√†"})
        }

        // L·∫•y to√†n b·ªô t·∫ßng d∆∞·ªõi d·∫°ng d·ªØ li·ªáu thu·∫ßn (plain)
        const allFloors = await Floor.findAll({where: {home_ID: id}})
        const floorPlainList = allFloors.map((f) => f.get({plain: true}))

        const currentTotalFloors = floorPlainList.length
        const expectedTotalFloors = Math.max(1, newTotalFloors) // lu√¥n gi·ªØ l·∫°i √≠t nh·∫•t 1 t·∫ßng

        // T√¨m t·∫ßng tr·ªát
        const floorGround = floorPlainList.find((f) => f.floor_Name.toLowerCase().includes("tr·ªát"))

        // L·ªçc ra c√°c t·∫ßng c√≤n l·∫°i v√† parse s·ªë t·∫ßng t·ª´ t√™n
        const otherFloors = floorPlainList
            .filter((f) => f.floor_ID !== floorGround?.floor_ID)
            .map((f) => ({
                ...f,
                floorNumber: parseInt(f.floor_Name.replace(/[^\d]/g, ""), 10),
            }))
            .filter((f) => !isNaN(f.floorNumber))
            .sort((a, b) => b.floorNumber - a.floorNumber) // cao ‚Üí th·∫•p

        const numToDelete = currentTotalFloors - expectedTotalFloors

        console.log("üìå T·ªïng t·∫ßng hi·ªán t·∫°i:", currentTotalFloors)
        console.log("üìå T·ªïng t·∫ßng m·ªõi:", expectedTotalFloors)
        console.log("üìå C·∫ßn x√≥a:", numToDelete)

        if (numToDelete > 0) {
            const floorsToDelete = otherFloors.slice(0, numToDelete)
            const deleteIDs = floorsToDelete.map((f) => f.floor_ID)

            console.log(
                "üóë X√≥a t·∫ßng:",
                floorsToDelete.map((f) => f.floor_Name)
            )

            if (deleteIDs.length > 0) {
                await Floor.destroy({
                    where: {
                        floor_ID: {[Op.in]: deleteIDs},
                    },
                })
            }
        }

        // C·∫≠p nh·∫≠t th√¥ng tin nh√†
        await home.update(data)

        const updatedHome = await Home.findByPk(id)
        res.json(updatedHome)
    } catch (error) {
        console.error("‚ùå L·ªói c·∫≠p nh·∫≠t nh√†:", error)
        res.status(500).json({message: "L·ªói m√°y ch·ªß", error})
    }
}

export {getAllHomes, createHome, deleteHome, updateHome}
